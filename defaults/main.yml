# SPDX-License-Identifier: MIT
---
# Here is the right place to put the role's input variables.
# This file also serves as a documentation for such a variables.

# The provider for nbde_client role. Currently 'clevis' is supported.
nbde_client_provider: clevis


# nbde_client_bindings - the description of the devices, that may also contain
# a pin configuration for each group of devices.
#
# nbde_client_bindings supports the following keys:
#  * devices - specifies LUKS devices, with their path and possibly either a
#              passphrase or key file.
#  * pin     - the settings for the binding, like the servers it should bind
#              to.
#  * state   - specifies whether the binding with the configuration described
#              should be added or removed. Setting state to present (the
#              default) means bindings will be added; setting state to absent
#              means bindings will be removed from the devices/slots.
#
#
# devices supports the following keys:
# * path    - specifies the path to access this device (REQUIRED).
# * pass    - specifies a valid passphrase for this device.
# * keyfile - specifies either the absolute or relative path of a valid key
#             file for this device.
#
# Example:
# - devices:
#    - path: /dev/sda1
#      pass: password
#    - path: /dev/sda2
#      keyfile: /vault/keyfile
#
#
# pin supports the following keys:
# * slot               - specifies the slot to use for the binding. Default
#                        is 1.
# * servers            - specifies a list of servers to bind to. To enable
#                        high availability, simply specify more than one server
#                        here.
# * threshold          - specifies the threshold for the Shamir Secret Sharing
#                        (SSS) scheme that is put in place when using more
#                        than one server. When using multiple servers,
#                        threshold indicates how many of those servers should
#                        succeed in order to complete the decryption.
# * overwrite          - specifies whether we should override any existing
#                        binding in the specified slot.
# * discard_passphrase - specifies whether we should discard the passphrase
#                        provided -- via either pass or keyfile, in devices
#                        -- after completing the binding operation.
#
# Example:
#
# pin:
#  slot: 3
#  servers:
#    - http://tang.server01
#    - http://tang.server02
#  overwrite: yes
#
#
# Example for nbde_client_bindings:
#
# nbde_client_bindings:
#   - devices:
#       - path: /dev/sda1
#        pass: password
#     pin:
#       servers:
#         - http://tang.server01
#         - http://tang.server02
#    state: present
nbde_client_bindings: []

# nbde_client_remote_dir specifies a directory in the remote hosts that may
# be used for storing temporary data such as transferred keyfiles.
# Default is /root/.local/share/nbde_client/.
nbde_client_remote_dir: /root/.local/share/nbde_client/

# nbde_client_update_initramfs indicates whether the initramfs should be
# updated in case changes are made when processing the clevis operations
# on the devices. Default is yes.
nbde_client_update_initramfs: yes

# vim:set ts=2 sw=2 et:
