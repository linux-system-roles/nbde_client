---
- name: Ensure required packages are installed
  package:
    name: "{{ __nbde_client_packages }}"
    state: present

- name: Get services
  service_facts:

- name: Enable clevis askpass unit
  systemd:
    name: clevis-luks-askpass.path
    enabled: true
    daemon_reload: true
  when: ansible_facts.services['clevis-luks-askpass.service'] is defined

- name: Generate nbde_client dracut config
  template:
    src: nbde_client.conf
    dest: /etc/dracut.conf.d/nbde_client.conf
    owner: root
    mode: '0444'

- name: Check whether devices are at the desired state
  when:
    - nbde_client_bindings | default([])
  nbde_client_clevis:
    bindings: "{{ nbde_client_bindings | default([]) }}"
  check_mode: true
  register: __nbde_client_clevis_check_state
  no_log: true

- name: Prepare key files, perform clevis operations and dispose of key files
  when:
    - __nbde_client_clevis_check_state is defined
    - __nbde_client_clevis_check_state is changed
  block:
    - name: Create temporary directory to hold key files
      tempfile:
        state: directory
        suffix: nbde_client_encryption_keys
      when:
        - nbde_client_bindings | default([])
      register: nbde_client_tempdir

    - name: Ensure we transfer key files
      copy:
        src: "{{ item.encryption_key_src }}"
        dest: "{{ nbde_client_tempdir.path }}/"
        mode: '0400'
      when:
        - nbde_client_tempdir.path is defined
        - item.encryption_key_src | default("")
      loop: "{{ nbde_client_bindings }}"
      loop_control:
        label: "{{ item.encryption_key_src | default('') }}"
      no_log: true

    - name: Perform clevis operations
      when:
        - nbde_client_bindings | default([])
        - nbde_client_tempdir.path is defined
      nbde_client_clevis:
        bindings: "{{ nbde_client_bindings | default([]) }}"
        data_dir: "{{ nbde_client_tempdir.path }}"
      notify: Handle nbde_client update initramfs
      no_log: true

  rescue:
    - name: Failed message
      fail:
        msg: "{{ ansible_failed_result }}"

  always:
    - name: Remove temporary directory used to hold key files
      file:
        path: "{{ nbde_client_tempdir.path }}"
        state: absent
      when:
        - nbde_client_bindings | default([])
        - nbde_client_tempdir.path is defined

- name: Set-up network flushing
  block:
    - name: Deploy network flushing script
      template:
        src: nbde_client-network-flush.j2
        dest: /usr/bin/nbde_client-network-flush
        mode: '0755'

    - name: Deploy network flushing service
      template:
        src: nbde_client-network-flush.service.j2
        dest: /etc/systemd/system/nbde_client-network-flush.service
        mode: '0644'

    - name: Create a directory for nbde_client dracut network flushing module
      file:
        path: /usr/lib/dracut/modules.d/60nbde_client/
        state: directory
        mode: '0755'

    - name: Deploy nbde_client dracut network flushing module
      template:
        src: "{{ item }}"
        dest: >-
          /usr/lib/dracut/modules.d/60nbde_client/{{ item | splitext | first }}
        mode: '0644'
      loop:
        - module-setup.sh.j2
        - nbde_client-hook.sh.j2

    - name: Prepare for network flushing - reset autoconnect-priority
      ansible.builtin.command:
        cmd: /usr/bin/nbde_client-network-flush reset-autoconn-prio
      register: __nbde_client_autoconn_prio
      changed_when: __nbde_client_autoconn_prio.stderr

    - name: Reload systemd config
      systemd:
        daemon_reload: true

    - name: Enable network flushing service
      service:
        name: nbde_client-network-flush.service
        enabled: true

# vim:set ts=2 sw=2 et:
